<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tysonjh]]></title>
  <link href="http://tysonjh.com/atom.xml" rel="self"/>
  <link href="http://tysonjh.com/"/>
  <updated>2014-05-09T10:39:55-04:00</updated>
  <id>http://tysonjh.com/</id>
  <author>
    <name><![CDATA[tysonjh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spray Custom 404]]></title>
    <link href="http://tysonjh.com/blog/2014/05/05/spray-custom-404/"/>
    <updated>2014-05-05T19:34:04-04:00</updated>
    <id>http://tysonjh.com/blog/2014/05/05/spray-custom-404</id>
    <content type="html"><![CDATA[<p><a href="http://spray.io">Spray</a> is a great web framework for slapping an app together quickly once you know your way around. Also it uses <a href="http://akka.io">Akka</a> and that&rsquo;s cool. Having a custom 404 page is standard on the interwebs these days, but it took me a bit of work to figure out how to implement it with Spray.</p>

<h3>Goals</h3>

<p>A simple app that has routes and serves static assets. If an asset can not be loaded, a custom 404 page should be returned.</p>

<h3>Solution Highlights</h3>

<p>Spray uses <a href="http://spray.io/documentation/1.2.1/spray-routing/key-concepts/directives/">directives</a> to express complex routing patterns elegantly. There are many <a href="http://spray.io/documentation/1.2.1/spray-routing/predefined-directives-alphabetically/">predefined directives</a> available which should satisfy most application needs. Directives are <a href="http://spray.io/documentation/1.2.1/spray-routing/key-concepts/directives/#composing-directives">composable</a> and <a href="http://spray.io/documentation/1.2.1/spray-routing/advanced-topics/custom-directives/">extensible</a>. They can be nested and/or chained together using the <code>~</code> operator, combined with <code>|</code> and <code>&amp;</code> operators &ndash; the possibilities are quite endless.</p>

<p>To implement the custom 404 page, we will make use of the following predefined directives:</p>

<ul>
<li><code>path</code>: <em>to match the complete unmatched path</em></li>
<li><code>respondWithStatus</code>: <em>to override the inner route status code</em></li>
<li><code>getFromFile</code>: <em>to get the static asset from disk (or recover with the 404 template from disk)</em></li>
<li><code>handleRejections</code>: <em>to handle the rejection when <code>getFromFile</code> can not find the static asset</em></li>
</ul>


<figure class='code'><figcaption><span>Defining a RejectionHandler</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">//import spray.routing.{ Directives, Route }</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">notFoundTemplate</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">&quot;public/404.html&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">assetNotFoundHandler</span> <span class="k">=</span> <span class="nc">RejectionHandler</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Nil</span> <span class="cm">/* secret code for path not found */</span> <span class="k">⇒</span>
</span><span class='line'>    <span class="n">respondWithStatus</span><span class="o">(</span><span class="mi">404</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">getFromFile</span><span class="o">(</span><span class="n">notFoundTemplate</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">staticAssets</span><span class="k">:</span> <span class="kt">Route</span> <span class="o">=</span> <span class="n">path</span><span class="o">(</span><span class="nc">Rest</span><span class="o">)</span> <span class="o">{</span> <span class="n">pathRest</span><span class="k">:</span> <span class="kt">String</span> <span class="k">⇒</span>
</span><span class='line'>  <span class="kt">handleRejections</span><span class="o">(</span><span class="kt">assetNotFoundHandler</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">getFromFile</span><span class="o">(</span><span class="kt">new</span> <span class="kt">File</span><span class="o">(</span><span class="kt">Conf.publicAssetDir</span> <span class="kt">+</span> <span class="kt">pathRest</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>notFoundTemplate</code> value is a plain old HTML file. The <code>staticAssets</code> method can be combined with other directives.</p>

<figure class='code'><figcaption><span>Using the Static Assets Route</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">routes</span><span class="k">:</span> <span class="kt">Route</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">path</span><span class="o">(</span><span class="s">&quot;helloworld&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">complete</span><span class="o">(</span><span class="s">&quot;Hello World!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span> <span class="o">~</span>
</span><span class='line'>  <span class="n">staticAssets</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>staticAssets</code> route will happily load all of the <code>.js</code>, <code>.css</code>, <code>.html</code>, <code>.txt</code>, etc. files. In fact, I&rsquo;m using this exact approach with the <a href="https://angularjs.org/">angular</a> and <a href="http://getbootstrap.com/">bootstrap</a> frameworks in an app right now.</p>

<p>Notice that the static asset directive is the last in the chain. This makes it the final attempt to resolve the URL before returning the 404. Quite a common approach in various sample projects and production solutions alike.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala DelayedInit Trait Explored]]></title>
    <link href="http://tysonjh.com/blog/2014/03/08/scala-delayedinit-trait-explored/"/>
    <updated>2014-03-08T15:58:24-05:00</updated>
    <id>http://tysonjh.com/blog/2014/03/08/scala-delayedinit-trait-explored</id>
    <content type="html"><![CDATA[<p>The App trait is often used for making easily executable code. It is a display of how elegant the language can be. A hook for those new to the Scala language. Put a &ldquo;Hello World!&rdquo; app from Scala beside a Java app and you&rsquo;ll notice among other things the lack of a <code>main</code> method from the former. Cool &ndash; look how succinct Scala is!</p>

<p>The darker side of this nifty feature is rather subtle. Especially until the <a href="https://issues.scala-lang.org/browse/SI-4680">open major bug since 2.9.1</a> is resolved. I came across it while using the <a href="https://github.com/mDialog/smoke">Smoke</a> HTTP service library and mixing it into a trait. Smoke extends the DelayedInit trait for initializing the server before executing the body of the main App object. It&rsquo;s a nice use case.</p>

<p>The Scaladoc for <a href="http://www.scala-lang.org/api/2.10.3/#scala.DelayedInit">DelayedInit</a> explicitly states that traits don&rsquo;t automagically benefit from mixing in DelayedInit like a class or object would. The doc has an example of how to define the  delayedInit method within a trait that will be executed as expected. In search of the <code>SI-4680</code> bug I performed a series of investigative scenarios, which are presented here.</p>

<p>The gist is <a href="https://gist.github.com/tysonjh/9438697">here</a>.</p>

<h3>Test Traits</h3>

<p>A simple trait that extended the DelayedInit trait, along with a couple others for mixins.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Stage1</span> <span class="k">extends</span> <span class="nc">DelayedInit</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage1 constructor&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">delayedInit</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage1 delayedInit before x&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">x</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage1 delayedInit after x&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">Stage2</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage2 constructor&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">Stage3</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage3 constructor&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Traits can be mixed in using several different techniques. Here are some with regular mixins and some with dependency injection.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Stage123</span> <span class="k">extends</span> <span class="nc">Stage1</span> <span class="k">with</span> <span class="nc">Stage2</span> <span class="k">with</span> <span class="nc">Stage3</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage123 constructor&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">Stage1Di23</span> <span class="k">extends</span> <span class="nc">Stage1</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this:</span> <span class="kt">Stage2</span> <span class="kt">with</span> <span class="kt">Stage3</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage1Di23 constructor&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">trait</span> <span class="nc">Stage12Di3</span> <span class="k">extends</span> <span class="nc">Stage1</span> <span class="k">with</span> <span class="nc">Stage2</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this:</span> <span class="kt">Stage3</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage12Di3 constructor&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>SI-4680 Bug Example</h3>

<p>A trait with The empty initialization code in the instantiated trait results in the <code>delayedInit</code> method not being invoked.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Stage1 constructor</span>
</span><span class='line'><span class="cm">Stage2 constructor</span>
</span><span class='line'><span class="cm">Stage3 constructor</span>
</span><span class='line'><span class="cm">Stage123 constructor</span>
</span><span class='line'><span class="cm">Main application constructor end</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Main123</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Main application constructor start&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">new</span> <span class="nc">Stage123</span> <span class="o">{}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Main application constructor end&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result of running this object is shown in the comments. All of the initializations of the various traits were executed, but the <code>delayedInit</code> method was never called! Note that it is not possible to instantiate a trait, there is no constructor. By providing <code>{}</code> we are providing a constructor and an anonymous class that subclasses the trait <code>Stage123</code>. This is the empty constructor that results in bug SI-4680.</p>

<h3>SI-4680 Bug Workaround</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Main application constructor start</span>
</span><span class='line'><span class="cm">Stage1 constructor</span>
</span><span class='line'><span class="cm">Stage2 constructor</span>
</span><span class='line'><span class="cm">Stage3 constructor</span>
</span><span class='line'><span class="cm">Stage123 constructor</span>
</span><span class='line'><span class="cm">Stage1 delayedInit before x</span>
</span><span class='line'><span class="cm">Stage123 NonEmpty constructor</span>
</span><span class='line'><span class="cm">Stage1 delayedInit after x</span>
</span><span class='line'><span class="cm">Main application constructor end</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Main123NonEmpty</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Main application constructor start&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">new</span> <span class="nc">Stage123</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage123 NonEmpty constructor&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Main application constructor end&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example the constructor is populated with a <code>println</code> for illustrating the example but the constructor could be <code>{ { } }</code> or <code>{Unit}</code>, comments don&rsquo;t count.</p>

<h3>Dependency Injection</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Stage1Di23</span> <span class="k">extends</span> <span class="nc">Stage1</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this:</span> <span class="kt">Stage2</span> <span class="kt">with</span> <span class="kt">Stage3</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage1Di23 constructor&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Main application constructor start</span>
</span><span class='line'><span class="cm">Stage1 constructor</span>
</span><span class='line'><span class="cm">Stage1Di23 constructor</span>
</span><span class='line'><span class="cm">Stage2 constructor</span>
</span><span class='line'><span class="cm">Stage3 constructor</span>
</span><span class='line'><span class="cm">Stage1 delayedInit before x</span>
</span><span class='line'><span class="cm">Stage1Di23 NonEmpty constructor</span>
</span><span class='line'><span class="cm">Stage1 delayedInit after x</span>
</span><span class='line'><span class="cm">Main application constructor end</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Main1Di23NonEmpty</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Main application constructor start&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">new</span> <span class="nc">Stage1Di23</span> <span class="k">with</span> <span class="nc">Stage2</span> <span class="k">with</span> <span class="nc">Stage3</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage1Di23 NonEmpty constructor&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Main application constructor end&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are lots of great articles on DI in Scala, don&rsquo;t use this as one. What is interesting here is the order of execution. The body of our instantiated anonymous class of type <code>Stage1Di23 with Stage2 with Stage3</code> is executed within the <code>delayedInit</code> method now that it is not empty. I was surprised by the output, what I expected to see was <code>Stage1, Stage1Di23, Stage3, Stage2</code>, following the idea where traits are generally layered on from right to left. To better understand what is happening with the template evaluation, the <code>Stage2</code> trait has been mixed in as a base class instead of an injected dependency,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Stage12Di3</span> <span class="k">extends</span> <span class="nc">Stage1</span> <span class="k">with</span> <span class="nc">Stage2</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">this:</span> <span class="kt">Stage3</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage12Di3 constructor&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Main application constructor start</span>
</span><span class='line'><span class="cm">Stage1 constructor</span>
</span><span class='line'><span class="cm">Stage2 constructor</span>
</span><span class='line'><span class="cm">Stage12Di3 constructor</span>
</span><span class='line'><span class="cm">Stage3 constructor</span>
</span><span class='line'><span class="cm">Stage1 delayedInit before x</span>
</span><span class='line'><span class="cm">Stage12Di3 NonEmpty constructor</span>
</span><span class='line'><span class="cm">Stage1 delayedInit after x</span>
</span><span class='line'><span class="cm">Main application constructor end</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">Main12Di3NonEmpty</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Main application constructor start&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">new</span> <span class="nc">Stage12Di3</span> <span class="k">with</span> <span class="nc">Stage3</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">println</span><span class="o">(</span><span class="s">&quot;Stage12Di3 NonEmpty constructor&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="n">println</span><span class="o">(</span><span class="s">&quot;Main application constructor end&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This clears things up a bit more. This is similar to the Example 5.1.1 from the Scala Specification,</p>

<blockquote><p>Example 5.1.1 Consider the following class deﬁnitions:<br/>class Base extends Object {}<br/>trait Mixin extends Base {}<br/>object O extends Mixin {}<br/>In this case, the deﬁnition of O is expanded to:<br/>object O extends Base with Mixin {}</p><footer><strong>http://www.scala-lang.org/docu/files/ScalaReference.pdf Scala Specification</strong></footer></blockquote>


<p>It would be nice to see the actual output from the compiler. The scalac <code>-print</code> option can do this and removes all Scala specific features and print to standard output. Now it&rsquo;s clear that first the superclass constructor of the anonymous class is evaluated. Followed by constructors of all base classes that are mixed in, in reverse order of the occurrence in linearization. Then the <code>delayedInit</code> method is called for each trait that extends the <code>DelayedInit</code> trait and implements the <code>delayedInit</code> method, first <code>App</code>, then <code>Stage1</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">final</span> <span class="k">class</span> <span class="nc">Test$$anon$1</span> <span class="k">extends</span> <span class="nc">Object</span> <span class="k">with</span> <span class="nc">Stage12Di3</span> <span class="k">with</span> <span class="nc">Stage3</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">override</span> <span class="k">def</span> <span class="n">delayedInit</span><span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Function0</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="nc">Stage1$class</span><span class="o">.</span><span class="n">delayedInit</span><span class="o">(</span><span class="nc">Test$$anon$1</span><span class="o">.</span><span class="k">this</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span>
</span><span class='line'>  <span class="k">def</span> <span class="o">&lt;</span><span class="n">init</span><span class="o">&gt;()</span><span class="k">:</span> <span class="kt">anonymous</span> <span class="kt">class</span> <span class="kt">anon$1</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Test$$anon$1</span><span class="o">.</span><span class="k">super</span><span class="o">.&lt;</span><span class="n">init</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="nc">Stage1$class</span><span class="o">.</span><span class="cm">/*Stage1$class*/</span><span class="nc">$init</span><span class="n">$</span><span class="o">(</span><span class="nc">Test$$anon$1</span><span class="o">.</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="nc">Stage2$class</span><span class="o">.</span><span class="cm">/*Stage2$class*/</span><span class="nc">$init</span><span class="n">$</span><span class="o">(</span><span class="nc">Test$$anon$1</span><span class="o">.</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="nc">Stage12Di3$class</span><span class="o">.</span><span class="cm">/*Stage12Di3$class*/</span><span class="nc">$init</span><span class="n">$</span><span class="o">(</span><span class="nc">Test$$anon$1</span><span class="o">.</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="nc">Stage3$class</span><span class="o">.</span><span class="cm">/*Stage3$class*/</span><span class="nc">$init</span><span class="n">$</span><span class="o">(</span><span class="nc">Test$$anon$1</span><span class="o">.</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="nc">Test$$anon$1</span><span class="o">.</span><span class="k">this</span><span class="o">.</span><span class="n">delayedInit</span><span class="o">(</span><span class="k">new</span> <span class="n">anonymous</span> <span class="k">class</span> <span class="nc">anon$1$delayedInit$body</span><span class="o">(</span><span class="nc">Test$$anon$1</span><span class="o">.</span><span class="k">this</span><span class="o">));</span>
</span><span class='line'>    <span class="o">()</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Macros: accessing case class parameters]]></title>
    <link href="http://tysonjh.com/blog/2014/02/09/scala-macros-accessing-case-class-parameters/"/>
    <updated>2014-02-09T00:05:21-05:00</updated>
    <id>http://tysonjh.com/blog/2014/02/09/scala-macros-accessing-case-class-parameters</id>
    <content type="html"><![CDATA[<p>Gaining access to a case class&#8217; constructor parameters within a macro implementation was not obvious at first. One approach is
 to make use of the <code>WeakTypeTag</code>. Consider the example macro implementation with the following signature,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">macroImpl</span><span class="o">[</span><span class="kt">A:</span> <span class="kt">c.WeakTypeTag</span><span class="o">](</span><span class="n">c</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To gain access to the <code>Type</code> of <code>A</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">tpe</span><span class="k">:</span> <span class="kt">Type</span> <span class="o">=</span> <span class="n">weakTypeOf</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The trait <code>Type</code> has a method <code>declarations</code> that returns a <code>MemberScope</code> which is essentially an <code>Iterable[Symbol]</code> collection. The <code>Symbol</code> is of interest, for it contains useful information about anything in Scala that can be assigned a name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">decl</span><span class="k">:</span> <span class="kt">MemberScope</span>  <span class="o">=</span> <span class="n">tpe</span><span class="o">.</span><span class="n">declarations</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simple <code>collect</code> and the right partial function and presto,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">params</span><span class="k">:</span> <span class="kt">Iterable</span><span class="o">[</span><span class="kt">Name</span><span class="o">]</span> <span class="k">=</span> <span class="n">decl</span><span class="o">.</span><span class="n">collect</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">param</span> <span class="k">if</span> <span class="n">param</span><span class="o">.</span><span class="n">isMethod</span> <span class="o">&amp;&amp;</span> <span class="n">param</span><span class="o">.</span><span class="n">asMethod</span><span class="o">.</span><span class="n">isCaseAccessor</span> <span class="k">=&gt;</span> <span class="n">field</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>params</code> contains the iterable collection of the case class parameter names.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feature Toggling using Scala Quasiquote Macros]]></title>
    <link href="http://tysonjh.com/blog/2014/01/29/scala-macros-and-quasiquotes/"/>
    <updated>2014-01-29T02:36:36-05:00</updated>
    <id>http://tysonjh.com/blog/2014/01/29/scala-macros-and-quasiquotes</id>
    <content type="html"><![CDATA[<p>It&rsquo;s tough to dream up reasons to use macros in Scala. When our team began considering feature toggling
to avoid experiencing another merging nightmare, it seemed like an excellent use case for a macro. A feature
toggle is simply a construct that wraps a block of code, executing it if the feature is enabled.
It is also referred to as kill switching, feature flipping, etc. If you are interested on learning more, check out
<a href="http://martinfowler.com/bliki/FeatureToggle.html">this article</a> by Martin Fowler. According to Fowler&rsquo;s article
the toggles we will be supporting are <em>business toggles</em>. Here is the basic idea,</p>

<figure class='code'><figcaption><span>Toggle Flip Pseudocode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">featureEnabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">doFeatureStuff</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">doNotDoFeatureStuff</span><span class="o">()</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Scala macros are great for generating code, so it should be a simple matter to generate the conditional wrapper
around a feature block.</p>

<h3>Goals</h3>

<ol>
<li>Macro is simple to use</li>
<li>Macro wraps feature code with a conditional</li>
<li>Macro boolean condition implementation is extensible</li>
</ol>


<p>The third point is to facilitate different mechanisms for querying a feature&rsquo;s toggle state. The first use case
for this feature will be writing hard wired scenarios of the boolean condition for testing purposes. Already I
am working on a Redis backed boolean conditional that polls periodically for changes in feature flags.</p>

<h3>Macros</h3>

<p>Jumping right into the coding turned out to be the wrong approach. Macro programming in Scala is tough. It requires
an intimate knowledge of how the AST is built and the symbols used. The documentation scratches the surface but leaves many
questions unanswered. Finding examples online helped but I still struggled to massage them into a workable solution. Furthermore the
examples I found used a lot of deprecated methods.</p>

<p>I&rsquo;m not going to bother writing about directly manipulating the AST to create macros in Scala. At the end of
this post exists a link section, in it you will find some great articles and examples of manipulating the AST.
We are going to take a look at using <em>quasiquotes</em>.</p>

<h3>Quasiquotes</h3>

<p>Shipping with Scala 2.11 but supported in 2.10 with the <a href="http://docs.scala-lang.org/overviews/macros/paradise.html">macro paradise</a>
plugin is <a href="http://docs.scala-lang.org/overviews/macros/quasiquotes.html">quasiquotes</a>. The basic idea is that they allow macros
to be written similar to normal Scala code. Quasiquotes use the familiar concept of
<a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">string interpolation</a>. <em>If you are new
to writing macros start with quasiquotes!</em></p>

<p>There is an excellent <a href="https://github.com/scalamacros/sbt-example-paradise">sbt-example-paradise</a> repository on github that will
help get started.</p>

<h4>Define the macro</h4>

<figure class='code'><figcaption><span>Flipper Macro Definition</span><a href='https://github.com/tysonjh/dolphin/blob/master/src/main/scala/Dolphin.scala'>Source File</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">trait</span> <span class="nc">Dolphin</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">flipper</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">featureName</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span> <span class="n">config</span><span class="k">:</span> <span class="kt">QueryableConfig</span><span class="o">)</span>
</span><span class='line'>                <span class="o">(</span><span class="n">fn</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="n">T</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="n">macro</span> <span class="nc">DolphinMacro</span><span class="o">.</span><span class="n">flipperImpl</span><span class="o">[</span><span class="kt">T</span><span class="o">]</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing too magical happening here, the <code>macro</code> keyword is followed by the name of the static macro implementation method.</p>

<h4>Implement the macro</h4>

<figure class='code'><figcaption><span>Flipper Macro Implementation</span><a href='https://github.com/tysonjh/dolphin/blob/master/src/main/scala/Dolphin.scala'>Source File</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">DolphinMacro</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">flipperImpl</span><span class="o">[</span><span class="kt">T</span><span class="o">](</span><span class="n">c</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">(</span><span class="n">featureName</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">String</span><span class="o">],</span>
</span><span class='line'>                     <span class="n">config</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">QueryableConfig</span><span class="o">])</span>
</span><span class='line'>                    <span class="o">(</span><span class="n">fn</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">T</span><span class="o">])</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">c.universe._</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">q</span><span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">        if($config.isFeatureOn($featureName)) {</span>
</span><span class='line'><span class="s">          $fn</span>
</span><span class='line'><span class="s">        } else {}</span>
</span><span class='line'><span class="s">      &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="nc">Expr</span><span class="o">[</span><span class="kt">Unit</span><span class="o">](</span><span class="n">result</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This represents the implementation of the macro using quasiquotes. The import of <code>c.universe._</code> is common in most
macro definitions. It provides many useful methods, for us it provides the <code>q</code> string interpolator on <em>line 8</em>.
This is the start of the quasiquote. Appreciate how much it looks like plain old scala, compare it to any
AST constructions on the <a href="http://docs.scala-lang.org/overviews/macros/overview.html">macro overview</a> page on the
Scala macro documentation to understand how <em>awesome</em> this is.</p>

<p>Conceptually we are printing out the symbols that construct the desired outcome and letting the macro paradise
plugin handle the rest of the heavy lifting. Much easier to read isn&rsquo;t it? Compare it to the <code>showRaw</code> output of the
AST we would need to build without quasiquotes in <code>res0</code>:</p>

<figure class='code'><figcaption><span>The desired AST</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">scala.reflect.runtime.</span><span class="o">{</span><span class="n">universe</span> <span class="k">=&gt;</span> <span class="n">u</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.reflect.runtime.</span><span class="o">{</span><span class="n">universe</span><span class="k">=&gt;</span><span class="n">u</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">def</span> <span class="n">flipper</span><span class="o">(</span><span class="n">featureEnabled</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">)(</span><span class="n">doFeatureStuff</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)(</span><span class="n">doNotDoFeatureStuff</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>     <span class="o">|</span> <span class="k">if</span><span class="o">(</span><span class="n">featureEnabled</span><span class="o">){</span> <span class="n">doFeatureStuff</span> <span class="o">}</span>
</span><span class='line'>     <span class="o">|</span> <span class="k">else</span> <span class="n">doNotDoFeatureStuff</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">}</span>
</span><span class='line'><span class="n">flipper</span><span class="k">:</span> <span class="o">(</span><span class="kt">featureEnabled:</span> <span class="kt">Boolean</span><span class="o">)(</span><span class="kt">doFeatureStuff:</span> <span class="o">=&gt;</span> <span class="kt">Unit</span><span class="o">)(</span><span class="n">doNotDoFeatureStuff</span><span class="k">:</span> <span class="o">=&gt;</span> <span class="nc">Unit</span><span class="o">)</span><span class="nc">Unit</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">expr</span> <span class="k">=</span> <span class="n">u</span> <span class="n">reify</span> <span class="o">(</span><span class="n">flipper</span> <span class="k">_</span><span class="o">)</span>
</span><span class='line'><span class="n">expr</span><span class="k">:</span> <span class="kt">reflect.runtime.universe.Expr</span><span class="o">[</span><span class="kt">Boolean</span> <span class="k">=&gt;</span> <span class="o">((</span><span class="k">=&gt;</span> <span class="kt">Unit</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">((</span><span class="k">=&gt;</span> <span class="kt">Unit</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="kt">Unit</span><span class="o">))]</span> <span class="k">=</span>
</span><span class='line'><span class="nc">Expr</span><span class="o">[</span><span class="kt">Boolean</span> <span class="k">=&gt;</span> <span class="o">((</span><span class="k">=&gt;</span> <span class="kt">Unit</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">((</span><span class="k">=&gt;</span> <span class="kt">Unit</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="kt">Unit</span><span class="o">))]</span> <span class="o">({((</span><span class="n">featureEnabled</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">((</span><span class="n">doFeatureStuff</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">((</span><span class="n">doNotDoFeatureStuff</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">$read</span><span class="o">.</span><span class="n">flipper</span><span class="o">(</span><span class="n">featureEnabled</span><span class="o">)(</span><span class="n">doFeatureStuff</span><span class="o">)(</span><span class="n">doNotDoFeatureStuff</span><span class="o">))))})</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="n">u</span> <span class="n">showRaw</span> <span class="n">expr</span><span class="o">.</span><span class="n">tree</span>
</span><span class='line'><span class="n">res0</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="nc">Block</span><span class="o">(</span><span class="nc">List</span><span class="o">(),</span> <span class="nc">Function</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValDef</span><span class="o">(</span><span class="nc">Modifiers</span><span class="o">(</span><span class="nc">PARAM</span> <span class="o">|</span> <span class="nc">SYNTHETIC</span><span class="o">),</span> <span class="n">newTermName</span><span class="o">(</span><span class="s">&quot;featureEnabled&quot;</span><span class="o">),</span> <span class="nc">TypeTree</span><span class="o">(),</span> <span class="nc">EmptyTree</span><span class="o">)),</span> <span class="nc">Function</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValDef</span><span class="o">(</span><span class="nc">Modifiers</span><span class="o">(</span><span class="nc">PARAM</span> <span class="o">|</span> <span class="nc">SYNTHETIC</span><span class="o">),</span> <span class="n">newTermName</span><span class="o">(</span><span class="s">&quot;doFeatureStuff&quot;</span><span class="o">),</span> <span class="nc">TypeTree</span><span class="o">(),</span> <span class="nc">EmptyTree</span><span class="o">)),</span> <span class="nc">Function</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="nc">ValDef</span><span class="o">(</span><span class="nc">Modifiers</span><span class="o">(</span><span class="nc">PARAM</span> <span class="o">|</span> <span class="nc">SYNTHETIC</span><span class="o">),</span> <span class="n">newTermName</span><span class="o">(</span><span class="s">&quot;doNotDoFeatureStuff&quot;</span><span class="o">),</span> <span class="nc">TypeTree</span><span class="o">(),</span> <span class="nc">EmptyTree</span><span class="o">)),</span> <span class="nc">Apply</span><span class="o">(</span><span class="nc">Apply</span><span class="o">(</span><span class="nc">Apply</span><span class="o">(</span><span class="nc">Select</span><span class="o">(</span><span class="nc">Select</span><span class="o">(</span><span class="nc">Select</span><span class="o">(</span><span class="nc">Ident</span><span class="o">(</span><span class="nc">$line7</span><span class="o">.</span><span class="nc">$read</span><span class="o">),</span> <span class="n">newTermName</span><span class="o">(</span><span class="s">&quot;$iw&quot;</span><span class="o">)),</span> <span class="n">newTermName</span><span class="o">(</span><span class="s">&quot;$iw&quot;</span><span class="o">)),</span> <span class="n">newTermName</span><span class="o">(</span><span class="s">&quot;flipper&quot;</span><span class="o">)),</span> <span class="nc">List</span><span class="o">(</span><span class="nc">Ident</span><span class="o">(</span><span class="n">newTermName</span><span class="o">(</span><span class="s">&quot;featureEnabled&quot;</span><span class="o">)))),</span> <span class="nc">List</span><span class="o">(</span><span class="nc">Ident</span><span class="o">(</span><span class="n">newTermName</span><span class="o">(</span><span class="s">&quot;doFeatureStuff&quot;</span><span class="o">)))),</span> <span class="nc">List</span><span class="o">(</span><span class="nc">Ident</span><span class="o">(</span><span class="n">newTermName</span><span class="o">(</span><span class="s">&quot;doNotDoFeatureStuff&quot;</span><span class="o">))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>A more accurate way according to Imran Rashid&rsquo;s great post on <a href="http://imranrashid.com/posts/learning-scala-macros/">Learning Scala Macros</a> is to let the
scalac compiler do it for you (below). Though I still prefer quasiquotes to this!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scalac</span> <span class="o">-</span><span class="nc">Xplugin</span> <span class="n">macro</span><span class="o">-</span><span class="n">paradise_2</span><span class="o">.</span><span class="mf">10.2</span><span class="o">-</span><span class="mf">2.0</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="nc">SNAPSHOT</span><span class="o">.</span><span class="n">jar</span> <span class="o">-</span><span class="n">deprecation</span> <span class="o">-</span><span class="nc">Xprint</span><span class="k">:</span><span class="kt">parser</span> <span class="kt">-Ystop-after:parser</span> <span class="kt">-Yshow-trees-compact</span> <span class="kt">*.scala</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Test the macro</h4>

<figure class='code'><figcaption><span>Flipper Macro Tests</span><a href='https://github.com/tysonjh/dolphin/blob/master/src/test/scala/DolphinSpec.scala'>Source File</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">DolphinSpec</span> <span class="k">extends</span> <span class="nc">FunSpec</span> <span class="k">with</span> <span class="nc">Dolphin</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">featureAlwaysOnConfig</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">QueryableConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">isFeatureOn</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">featureAlwaysOffConfig</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">QueryableConfig</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">isFeatureOn</span><span class="o">(</span><span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="kc">false</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span><span class="o">(</span><span class="s">&quot;Flipper&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">it</span><span class="o">(</span><span class="s">&quot;should execute function if feature is on&quot;</span><span class="o">){</span>
</span><span class='line'>      <span class="k">var</span> <span class="n">cnt</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">flipper</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="n">featureAlwaysOnConfig</span><span class="o">){</span><span class="n">cnt</span> <span class="k">=</span> <span class="n">cnt</span> <span class="o">+</span> <span class="mi">1</span><span class="o">}</span>
</span><span class='line'>      <span class="n">assert</span><span class="o">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span><span class="o">(</span><span class="s">&quot;should not execute function if feature is off&quot;</span><span class="o">){</span>
</span><span class='line'>      <span class="k">var</span> <span class="n">cnt</span> <span class="k">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">flipper</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="n">featureAlwaysOffConfig</span><span class="o">){</span><span class="n">cnt</span> <span class="k">=</span> <span class="n">cnt</span> <span class="o">+</span> <span class="mi">1</span><span class="o">}</span>
</span><span class='line'>      <span class="n">assert</span><span class="o">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>      
</span></code></pre></td></tr></table></div></figure>


<p>This is how the macro can be tested, again nothing special here. An interesting detail to note is that in the
macro definition we have a call by name parameter <code>fn: =&gt; T</code>, but in this implementation of the macro we have
the parameter <code>fn: c.Expr[T]</code> which appears to be call by value. The tests clearly show that the call by name
parameter is only evaluated by name. Attempting to change the implementation to <code>fn: c.Expr[=&gt; T]</code> or <code>fn: =&gt; c.Expr[T]</code>
causes a compilation error.</p>

<p>The limitation is that one may only inline <code>fn</code> and not invoke it, at least until
Scala 2.11 where <code>fn: c.Tree</code> may be used as the implementation parameter (<a href="https://issues.scala-lang.org/browse/SI-5778">see here</a>).</p>

<h3>Summary</h3>

<p>Quasiquotes are a welcomed addition to the macro scene. They make writing macros more accessible by eliminating the
necessity for deep AST knowledge before one gets started. The code in this post is part of
the <a href="https://github.com/tysonjh/dolphin">Dolphin</a> library for feature toggling in Scala.</p>

<h3>Links</h3>

<ul>
<li><a href="http://www.scottlogic.com/blog/2013/06/05/scala-macros-part-1.html">Adventures with Scala Macros</a></li>
<li><a href="https://gist.github.com/travisbrown/4234441">Simple macro-based scala example</a></li>
<li><a href="http://docs.scala-lang.org/overviews/macros/overview.html">Scala Macros</a></li>
<li><a href="http://docs.scala-lang.org/overviews/macros/quasiquotes.html">Quasiquotes</a></li>
<li><a href="http://stackoverflow.com/questions/11055210/whats-the-easiest-way-to-use-reify-get-an-ast-of-an-expression-in-scala">Use reify to get AST of expression</a></li>
<li><a href="http://imranrashid.com/posts/learning-scala-macros/">Learning Scala Macros</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://tysonjh.com/blog/2014/01/18/hello-octopress/"/>
    <updated>2014-01-18T11:56:19-05:00</updated>
    <id>http://tysonjh.com/blog/2014/01/18/hello-octopress</id>
    <content type="html"><![CDATA[<p>This is a POC for migrating my blog to Jekyll. I&rsquo;m going to be focussing on technical content, more specifically <code>software development</code>.</p>
]]></content>
  </entry>
  
</feed>
